@page "/create-product"
@using System.Globalization
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.Components.Forms
@using CarPartsAppWasm.Models
@using CarPartsAppWasm.Shared
@inject HttpClient Http
@inject ServerSettings ServerSettings

<h3 class="mb-4">Create Product</h3>

<EditForm Model="_product" OnValidSubmit="HandleValidSubmit" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary class="alert alert-danger" />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" @bind-Value="_product.Name" class="form-control" />
        </div>
        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" @bind-Value="_product.Description" class="form-control" />
        </div>
        <div class="form-group">
            <label for="price">Price:</label>
            <InputNumber id="price" @bind-Value="_product.Price" class="form-control" />
        </div>
        <div class="form-group">
            <label for="stock">Stock:</label>
            <InputNumber id="stock" @bind-Value="_product.Stock" class="form-control" />
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <InputNumber id="category" @bind-Value="_product.CategoryId" class="form-control"/>
        </div>
        <div class="form-group">
            <label for="image">Image:</label>
            <InputFile id="image" OnChange="HandleImageChange"  class="form-control"/>
        </div>
        <button type="submit" class="btn btn-primary">Create</button>


   </EditForm>

@code {
    private ProductDto _product = new();

    private IBrowserFile _imageFile;

    private async Task HandleValidSubmit()
    {
        var content = new MultipartFormDataContent();
        content.Add(new StringContent(_product.Name!), "Name");
        content.Add(new StringContent(_product.Description), "Description");
        content.Add(new StringContent(_product.Price.ToString(CultureInfo.InvariantCulture)), "Price");
        content.Add(new StringContent(_product.Stock.ToString()), "Stock");
        content.Add(new StringContent(_product.CategoryId.ToString()), "CategoryId");
        if (_product.ImageUrl != null) content.Add(new StringContent(_product.ImageUrl), "ImageUrl");


        if (_imageFile != null)
        {
            var imageContent = new StreamContent(_imageFile.OpenReadStream());
            imageContent.Headers.ContentType = new MediaTypeHeaderValue(_imageFile.ContentType);
            content.Add(imageContent, "Image", _imageFile.Name);
        }

        var baseUrl = ServerSettings.ServerUrl;
        var createUrl = ServerSettings.CreateProduct;
        var fullUrl = baseUrl +"/"+ createUrl;
        try
        {
            var response = await Http.PostAsync(fullUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var createdProduct = await response.Content.ReadFromJsonAsync<Product>(); 
                Console.WriteLine("Product Created!");            
                // TODO handle notification and/or redirect to page(first validate product was created)
            }
            else
            {
                // TODO Handle error
                Console.WriteLine("Product NOT Created!");            

            }
        }
        catch (Exception e)
        {
            Console.WriteLine("Product NOT Created!"); 
            Console.WriteLine(e);
            throw;
        }


    }

    private void HandleImageChange(InputFileChangeEventArgs e)
    {
        _imageFile = e.File;
    }
}
